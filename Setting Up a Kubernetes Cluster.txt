# Cloud Playground Settings

# CentOS 8, Medium (3 units), Tag = 'Kubernetes Master'
# CentOS 8, Small (2 units), Tag = 'Kubernetes Worker'

# Chapter 2.2 - 'Setting Up a Kubernetes Cluster'
# URL: https://learn.acloud.guru/course/97037e05-88ed-41a1-92ee-f5a8080318c2/learn/6507da5b-10a7-4c04-81d9-c3d58ad9c2d2/90cfb59d-c97b-44c3-b2ab-f9d1024ec4c1/watch

# In this lesson, you will setup your Kubernetes cluster. We will start by installing the Master node.

# Setting up the Kubernetes Master

# The following actions will be executed on the Kubernetes Master.

1. Become root:

sudo -i

2. Create the configuration file for containerd:

cat <<EOF | sudo tee /etc/modules-load.d/containerd.conf
overlay
br_netfilter
EOF

3. Load the modules and open port 6443 at the firewall:

sudo modprobe overlay
sudo modprobe br_netfilter
sudo firewall-cmd --add-port=6443/tcp --permanent
sudo firewall-cmd --reload

4. Set the system configurations for Kubernetes networking:

cat <<EOF | sudo tee /etc/sysctl.d/99-kubernetes-cri.conf
net.bridge.bridge-nf-call-iptables = 1
net.ipv4.ip_forward = 1
net.bridge.bridge-nf-call-ip6tables = 1
EOF

5. Apply the new settings:

sudo sysctl --system

6. Add the stable Docker Community Edition repository to yum:

yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo

7. Install containerd:

sudo yum install -y containerd.io --allowerasing

8. Create the default configuration folder for containerd:

sudo mkdir -p /etc/containerd

9. Generate the default containerd configuration, and save it to the newly created default file:

sudo containerd config default | sudo tee /etc/containerd/config.toml

10. Restart containerd to ensure the new configuration file is used:

sudo systemctl restart containerd

11. Verify that containerd is running:

sudo systemctl status containerd

12. Disable swap:

sudo swapoff -a

13. Set SELinux in permissive mode (effectively disabling it):

sudo setenforce 0
sudo sed -i 's/^SELINUX=enforcing$/SELINUX=permissive/' /etc/selinux/config

14. Add the Kubernetes repository (this overwrites any existing configuration in /etc/yum.repos.d/kubernetes.repo):

cat <<EOF | sudo tee /etc/yum.repos.d/kubernetes.repo
[kubernetes]
name=Kubernetes
baseurl=https://pkgs.k8s.io/core:/stable:/v1.29/rpm/
enabled=1
gpgcheck=1
gpgkey=https://pkgs.k8s.io/core:/stable:/v1.29/rpm/repodata/repomd.xml.key
exclude=kubelet kubeadm kubectl cri-tools kubernetes-cni
EOF

15. Install kubelet, kubeadm and kubectl:

sudo yum install -y kubelet kubeadm kubectl --disableexcludes=kubernetes

16. Enable the kubelet service before running kubeadm:

sudo systemctl enable --now kubelet

17. Initialize the cluster using the IP range for Flannel:

kubeadm init --pod-network-cidr=10.244.0.0/16

18. Copy the kubeadmn join command that is in the output. We will need this later.

19. Exit sudo, copy the admin.conf to your home directory, and take ownership:

mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config

20. Deploy Flannel:

kubectl apply -f https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml

23. Check the cluster state:

kubectl get pods --all-namespaces

# Setting up the Kubernetes Worker

# Now that the setup for the Kubernetes master is complete, we will begin the process of configuring the worker node. The following actions will be executed on the Kubernetes worker.

1. Become root:

sudo -i

2. Create the configuration file for containerd:

cat <<EOF | sudo tee /etc/modules-load.d/containerd.conf
overlay
br_netfilter
EOF

3. Load the modules and open port 6443 at the firewall:

sudo modprobe overlay
sudo modprobe br_netfilter
sudo firewall-cmd --add-port=6443/tcp --permanent
sudo firewall-cmd --reload

4. Set the system configurations for Kubernetes networking:

cat <<EOF | sudo tee /etc/sysctl.d/99-kubernetes-cri.conf
net.bridge.bridge-nf-call-iptables = 1
net.ipv4.ip_forward = 1
net.bridge.bridge-nf-call-ip6tables = 1
EOF

5. Apply the new settings:

sudo sysctl --system

6. Add the stable Docker Community Edition repository to yum:

yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo

7. Install containerd:

sudo yum install -y containerd.io --allowerasing

8. Create the default configuration folder for containerd:

sudo mkdir -p /etc/containerd

9. Generate the default containerd configuration, and save it to the newly created default file:

sudo containerd config default | sudo tee /etc/containerd/config.toml

10. Restart containerd to ensure the new configuration file is used:

sudo systemctl restart containerd

11. Verify that containerd is running:

sudo systemctl status containerd

12. Disable swap:

sudo swapoff -a

13. Set SELinux in permissive mode (effectively disabling it):

sudo setenforce 0
sudo sed -i 's/^SELINUX=enforcing$/SELINUX=permissive/' /etc/selinux/config

14. Add the Kubernetes repository (this overwrites any existing configuration in /etc/yum.repos.d/kubernetes.repo):

cat <<EOF | sudo tee /etc/yum.repos.d/kubernetes.repo
[kubernetes]
name=Kubernetes
baseurl=https://pkgs.k8s.io/core:/stable:/v1.29/rpm/
enabled=1
gpgcheck=1
gpgkey=https://pkgs.k8s.io/core:/stable:/v1.29/rpm/repodata/repomd.xml.key
exclude=kubelet kubeadm kubectl cri-tools kubernetes-cni
EOF

15. Install kubelet, kubeadm and kubectl:

sudo yum install -y kubelet kubeadm kubectl --disableexcludes=kubernetes

16. Enable the kubelet service before running kubeadm:

sudo systemctl enable --now kubelet

17. Use the join token you copied before to add the Worker Node to the cluster:

kubeadm join <MASTER_IP>:6443 --token <TOKEN> --discovery-token-ca-cert-hash sha256:<HASH>

18. On the master node, test to see if the cluster was created properly. Get a listing of the nodes:

kubectl get nodes

19. Get a listing of 'kube-system' pods:

kubectl get pods -n kube-system
